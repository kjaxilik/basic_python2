'''
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной 
платы сотрудника. В расчете необходимо использовать формулу: 
(выработка в часах * ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать 
скрипт с параметрами.
'''

def zarplata(hour, rub, prime):
    zp = hour * rub + prime
    return print(zp)

zarplata(8*21, 350, 5000)


'''
2. Представлен список чисел. Необходимо вывести элементы исходного списка, 
значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. 
Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''
my_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
result = [el for x, el in enumerate(my_list[:]) if my_list[x-1] < my_list[x] and x>1]

print(f'Результат: {result}')

'''
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. 
Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
'''

print(f'Числа от 20 до 240 кратные на 20 или 21: {[x for x in range(20, 240) if x%20== 0 or x%21==0]}')



'''
4. Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''
list_1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
result = [x for x in list_1 if list_1.count(x) < 2]
print(result)


'''
5. Реализовать формирование списка, используя функцию range() и 
возможности генератора. В список должны войти четные числа от 100 до 1000 
(включая границы). Необходимо получить результат вычисления произведения 
всех элементов списка.
Подсказка: использовать функцию reduce().
'''
from functools import reduce

def my_func(x,y):
    return x*y

print(f'{reduce(my_func,[x for x in range(99, 1001) if x%2==0])}')


'''
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, 
а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, 
при котором повторение элементов списка будет прекращено.
'''

from itertools import count, cycle

chislo = int(input('Введите стартовое число '))
for x in count(chislo):
    if x < chislo+16: 
        print(x)
    else:
        break

list_1 = ['Mama-Mia', 'BTC', 'is Dump again', None]
с = 0
for x in cycle(list_1):
    if с < 7:
        print(x)
        с+=1
    else:
        break


'''
7. Реализовать генератор с помощью функции с ключевым словом yield, 
создающим очередное значение. При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо 
выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, 
факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''


from itertools import count
from math  import factorial

n = int(input('Введите целое положительное число '))

def fact(n):
    for el in count(1):
        if el < n+1:
            yield factorial(el)
        else:
            break

for el in fact(n):
    print(el)

